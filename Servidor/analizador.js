/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,10],$V2=[1,11],$V3=[1,12],$V4=[1,9],$V5=[2,5,14,16,17,18],$V6=[2,5,8,14,15,16,17,18,28,38,39,40,41,42,52,53,54,72,88,89,92,95,99,101],$V7=[1,35],$V8=[1,33],$V9=[1,36],$Va=[1,37],$Vb=[1,38],$Vc=[1,39],$Vd=[1,40],$Ve=[2,8,15,16,17,28,38,39,40,41,42],$Vf=[1,47],$Vg=[9,36,57],$Vh=[2,65],$Vi=[1,61],$Vj=[1,57],$Vk=[1,59],$Vl=[1,60],$Vm=[1,62],$Vn=[1,63],$Vo=[2,8,15,16,17,28,29,38,39,40,41,42,52,53,54,68,69,70,71,72,86,88,89,92,95,99,101],$Vp=[9,15,29,31,68,69,70,71],$Vq=[1,76],$Vr=[1,77],$Vs=[1,78],$Vt=[1,79],$Vu=[1,80],$Vv=[1,81],$Vw=[9,15,29,31,61,62,63,64,65,66,68,69,70,71],$Vx=[9,15,29,31,61,62,63,64,65,66,68,69,70,71,78,79,80,81,82,83,84,85,86,100],$Vy=[31,36],$Vz=[1,114],$VA=[1,121],$VB=[1,122],$VC=[1,123],$VD=[1,116],$VE=[1,117],$VF=[1,118],$VG=[1,124],$VH=[1,119],$VI=[9,15,29,31,61,62,68,69,70,71],$VJ=[9,15,29,31,61,62,63,64,68,69,70,71],$VK=[8,99,101],$VL=[2,8,15,16,17,38,39,40,41,42,52,53,54,72,88,89,92,95,99,101],$VM=[1,143],$VN=[1,162],$VO=[1,163],$VP=[2,8,15,16,17,38,39,40,41,42,52,53,54,72,88,89,92,94,95,99,101],$VQ=[9,31],$VR=[15,29,68,69,70,71,86],$VS=[9,15,29,31,68,69,70,71,86],$VT=[1,186],$VU=[1,187],$VV=[1,188],$VW=[1,189],$VX=[1,190],$VY=[1,191],$VZ=[1,178],$V_=[1,179],$V$=[1,180],$V01=[1,181],$V11=[1,182],$V21=[1,183],$V31=[1,184],$V41=[1,185],$V51=[9,15,29,31,61,62,63,64,65,66,68,69,70,71,78,79,80,81,82,83,84,85,86],$V61=[9,15,29,31,68,69,70,71,78,79,80,81,82,83,84,85,86],$V71=[9,15,29,31,68,69,70,71,78,79,84,85,86],$V81=[9,15,29,31,61,62,68,69,70,71,78,79,80,81,82,83,84,85,86],$V91=[9,15,29,31,61,62,63,64,68,69,70,71,78,79,80,81,82,83,84,85,86],$Va1=[1,233],$Vb1=[1,234];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"PRIMERO":4,"EOF":5,"SENTENCIAS":6,"ERR":7,"}":8,";":9,"SENTENCIA":10,"CLASS":11,"IMPORT":12,"COMENTARIOS":13,"TK_IMPORT":14,"TK_ID":15,"TK_CM":16,"TK_CL":17,"TK_CLASS":18,"{":19,"TODOCLASE":20,"TODOS":21,"TODO":22,"METODO":23,"FUNCION":24,"MAIN":25,"DECLARACION":26,"ASIGNACION":27,"TK_VOID":28,"(":29,"PARAMETROSGENERAL":30,")":31,"TODOGENERAL":32,"TIPO":33,"TK_MAIN":34,"PARAMETROS":35,",":36,"PARAMETRO":37,"TK_INT":38,"TK_DOUBLE":39,"TK_BOOLEAN":40,"TK_STRING":41,"TK_CHAR":42,"TODOSDENTRO":43,"TODODENTRO":44,"FOR":45,"WHILE":46,"DO":47,"SWITCH":48,"IF":49,"BCR":50,"LLAMADAF":51,"TK_BREAK":52,"TK_CONTINUE":53,"TK_RETURN":54,"SEXPRECION":55,"LISTA":56,"=":57,"EXPRECION":58,"EXPRECIONES":59,"E":60,"+":61,"-":62,"*":63,"/":64,"^":65,"%":66,"VALORES":67,"TK_CD":68,"TK_CH":69,"TK_NM":70,"TK_BOOL":71,"TK_FOR":72,"DECASIG":73,"CONDICIONES":74,"ITERADORES":75,"CONDICION":76,"C":77,"&&":78,"||":79,"<":80,"<=":81,">":82,">=":83,"!=":84,"==":85,"!":86,"ITERADOR":87,"TK_WHILE":88,"TK_DO":89,"TKIF":90,"ELSEL":91,"TK_IF":92,"ELSE":93,"TK_ELSE":94,"TK_SWITCH":95,"CASS":96,"CASES":97,"CASE":98,"TK_CASE":99,":":100,"TK_DEFAULT":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"}",9:";",14:"TK_IMPORT",15:"TK_ID",16:"TK_CM",17:"TK_CL",18:"TK_CLASS",19:"{",28:"TK_VOID",29:"(",31:")",34:"TK_MAIN",36:",",38:"TK_INT",39:"TK_DOUBLE",40:"TK_BOOLEAN",41:"TK_STRING",42:"TK_CHAR",52:"TK_BREAK",53:"TK_CONTINUE",54:"TK_RETURN",57:"=",61:"+",62:"-",63:"*",64:"/",65:"^",66:"%",68:"TK_CD",69:"TK_CH",70:"TK_NM",71:"TK_BOOL",72:"TK_FOR",78:"&&",79:"||",80:"<",81:"<=",82:">",83:">=",84:"!=",85:"==",86:"!",88:"TK_WHILE",89:"TK_DO",92:"TK_IF",94:"TK_ELSE",95:"TK_SWITCH",99:"TK_CASE",100:":",101:"TK_DEFAULT"},
productions_: [0,[3,2],[4,1],[7,2],[7,2],[6,2],[6,1],[10,1],[10,1],[10,1],[10,1],[12,3],[13,1],[13,1],[11,5],[11,4],[20,1],[21,2],[21,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[23,8],[23,7],[23,7],[23,6],[24,8],[24,7],[24,7],[24,6],[25,7],[25,6],[30,1],[35,3],[35,1],[37,2],[33,1],[33,1],[33,1],[33,1],[33,1],[32,1],[43,2],[43,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[50,2],[50,2],[50,3],[26,5],[26,3],[56,3],[56,1],[58,1],[59,2],[59,1],[60,3],[60,3],[60,3],[60,3],[60,3],[60,3],[60,3],[60,1],[67,1],[67,1],[67,1],[67,1],[67,1],[51,4],[51,3],[27,4],[45,10],[45,9],[73,1],[73,1],[74,1],[76,2],[76,1],[77,3],[77,3],[77,3],[77,3],[77,3],[77,3],[77,3],[77,3],[77,3],[77,3],[77,3],[77,3],[77,3],[77,3],[77,3],[77,2],[77,1],[75,1],[87,3],[87,3],[46,7],[46,6],[47,9],[47,8],[49,2],[49,1],[90,7],[90,6],[91,2],[91,1],[93,2],[93,4],[93,3],[48,7],[48,6],[55,1],[96,1],[97,2],[97,1],[98,4],[98,3],[98,3],[98,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
id = 0; er = 0; errores = []; return $$[$0-1];
break;
case 2:
this.$ = new AST.AST(id++, "AST", $$[$0], errores);
break;
case 3: case 4:
this.$ = new Error.Error(er++, $$[$0-1], "Sintactico", $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 5: case 17: case 46: case 67: case 90: case 120: case 129:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 6: case 18: case 38: case 91:
this.$ = []; this.$.push($$[$0]);
break;
case 7:
this.$ = new NodoAST.NodoAST( id++, "Clase", _$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 8:
this.$ = new NodoAST.NodoAST( id++, "Import", _$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 9: case 19: case 48:
this.$ = new NodoAST.NodoAST( id++, "Comentario", _$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 10: case 25: case 58:
this.$ = new NodoAST.NodoAST( id++, "ERROR", _$[$0].first_line, _$[$0].first_column, []); errores.push($$[$0]);
break;
case 11:
this.$ = [new NodoAST.NodoAST(id++, $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column, [])];
break;
case 12: case 13:
this.$ = [new NodoAST.NodoAST( id++, $$[$0], _$[$0].first_line, _$[$0].first_column, [])];
break;
case 14:
this.$ = [new NodoAST.NodoAST(id++, $$[$0-3], _$[$0-4].first_line, _$[$0-4].first_column, []), $$[$0-1]];
break;
case 15:
this.$ = [new NodoAST.NodoAST(id++, $$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column, [])];
break;
case 16: case 45:
this.$ = new NodoAST.NodoAST( id++, "Sentencias", _$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 20:
this.$ = new NodoAST.NodoAST( id++, "Metodo", _$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 21:
this.$ = new NodoAST.NodoAST( id++, "Funcion", _$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 22:
this.$ = new NodoAST.NodoAST( id++, "Main", _$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 23: case 50: case 88:
this.$ = new NodoAST.NodoAST( id++, "Declaracion", _$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 24: case 49: case 87:
this.$ = new NodoAST.NodoAST( id++, "Asignacion", _$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 26:
this.$ = [new NodoAST.NodoAST( id++, $$[$0-6], _$[$0-7].first_line, _$[$0-7].first_column, []), $$[$0-4], $$[$0-1]];
break;
case 27:
this.$ = [new NodoAST.NodoAST( id++, $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column, []), $$[$0-3]];
break;
case 28: case 34:
this.$ = [new NodoAST.NodoAST( id++, $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column, []), $$[$0-1]];
break;
case 29: case 35:
this.$ = [new NodoAST.NodoAST( id++, $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column, [])];
break;
case 30:
this.$ = [$$[$0-7], new NodoAST.NodoAST( id++, $$[$0-6], _$[$0-7].first_line, _$[$0-7].first_column, []), $$[$0-4], $$[$0-1]];
break;
case 31:
this.$ = [$$[$0-6], new NodoAST.NodoAST( id++, $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column, []), $$[$0-3]];
break;
case 32:
this.$ = [$$[$0-6], new NodoAST.NodoAST( id++, $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column, []), $$[$0-1]];
break;
case 33:
this.$ = [$$[$0-5], new NodoAST.NodoAST( id++, $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column, [])];
break;
case 36:
this.$ = new NodoAST.NodoAST( id++, "Parametros", _$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 37:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 39:
$$[$0-1].lista = [new NodoAST.NodoAST( id++, $$[$0], _$[$0].first_line, _$[$0].first_column, [])]; this.$ = $$[$0-1];
break;
case 40: case 41: case 42: case 43: case 44:
this.$ = new NodoAST.NodoAST( id++, $$[$0], _$[$0].first_line, _$[$0].first_column, []);
break;
case 47: case 68: case 117: case 121: case 130:
this.$ = [$$[$0]];
break;
case 51:
this.$ = new NodoAST.NodoAST( id++, "For", _$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 52:
this.$ = new NodoAST.NodoAST( id++, "While", _$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 53:
this.$ = new NodoAST.NodoAST( id++, "Do while", _$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 54:
this.$ = new NodoAST.NodoAST( id++, "Switch", _$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 55:
this.$ = new NodoAST.NodoAST( id++, "If", _$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 56: case 76:
this.$ = $$[$0];
break;
case 57:
this.$ = new NodoAST.NodoAST( id++, "Llamada funcion", _$[$0].first_line, _$[$0].first_column, [$$[$0]]);
break;
case 59: case 60:
this.$ = new NodoAST.NodoAST(id++, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, []);
break;
case 61:
this.$ = new NodoAST.NodoAST(id++, $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, [$$[$0-1]]);
break;
case 62:
$$[$0-4].lista = $$[$0-3]; this.$ = [$$[$0-4], $$[$0-1]];
break;
case 63:
$$[$0-2].lista = $$[$0-1]; this.$ = [$$[$0-2]];
break;
case 64:
this.$ = $$[$0-2]; this.$.push(new NodoAST.NodoAST( id++, $$[$0], _$[$0].first_line, _$[$0].first_column, []));
break;
case 65:
this.$ = []; this.$.push(new NodoAST.NodoAST( id++, $$[$0], _$[$0].first_line, _$[$0].first_column, []));
break;
case 66:
this.$ = new NodoAST.NodoAST( id++, "=", _$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 69: case 70: case 71: case 72: case 73: case 74: case 92: case 93: case 95: case 96: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106:
this.$ = new NodoAST.NodoAST(id++, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, [$$[$0-2], $$[$0]]);
break;
case 75:
this.$ = $$[$0-1];
break;
case 77: case 78: case 79: case 80: case 81:
this.$ = new NodoAST.NodoAST(id++, $$[$0], _$[$0].first_line, _$[$0].first_column, []);
break;
case 82:
this.$ = new NodoAST.NodoAST(id++, $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, [$$[$0-1]]);
break;
case 83:
this.$ = new NodoAST.NodoAST(id++, $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, []);
break;
case 84:
this.$ = [new NodoAST.NodoAST(id++, $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, []), $$[$0-1]];
break;
case 85:
this.$ = [$$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1]];
break;
case 86:
this.$ = [$$[$0-6], $$[$0-5], $$[$0-3]];
break;
case 89:
this.$ = new NodoAST.NodoAST(id++, "Condiciones", _$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 94:
this.$ = $$[$0-1]
break;
case 107:
this.$ = new NodoAST.NodoAST(id++, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, [$$[$0]]);
break;
case 108:
this.$ = $$[$0]
break;
case 109:
this.$ = new NodoAST.NodoAST(id++, "Iterador", _$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 110: case 111:
this.$ = [new NodoAST.NodoAST(id++, $$[$0-2]+$$[$0-1]+$$[$0], _$[$0-2].first_line, _$[$0-2].first_column, [])];
break;
case 112:
this.$ = [$$[$0-4], $$[$0-1]]
break;
case 113:
this.$ = [$$[$0-3]]
break;
case 114:
this.$ = [$$[$0-6], $$[$0-2]]
break;
case 115:
this.$ = [$$[$0-2]]
break;
case 116:
this.$ = $$[$0]; this.$.unshift($$[$0-1]);
break;
case 118:
this.$ = new NodoAST.NodoAST(id++, "if", _$[$0-6].first_line, _$[$0-6].first_column, [$$[$0-4], $$[$0-1]]);
break;
case 119:
this.$ = new NodoAST.NodoAST(id++, "if", _$[$0-5].first_line, _$[$0-5].first_column, [$$[$0-3]]);
break;
case 122:
this.$ = new NodoAST.NodoAST(id++, "else if", _$[$0-1].first_line, _$[$0-1].first_column, $$[$0].lista);
break;
case 123:
this.$ = new NodoAST.NodoAST(id++, "else", _$[$0-3].first_line, _$[$0-3].first_column, [$$[$0-1]]);
break;
case 124:
this.$ = new NodoAST.NodoAST(id++, "else", _$[$0-2].first_line, _$[$0-2].first_column, []);
break;
case 125:
this.$ = [$$[$0-4], $$[$0-1]];
break;
case 126:
this.$ = [$$[$0-3]];
break;
case 127:
this.$ = new NodoAST.NodoAST( id++, "Exprecion", _$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 128:
this.$ = new NodoAST.NodoAST( id++, "Cases", _$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 131:
this.$ = new NodoAST.NodoAST( id++, "Case", _$[$0-3].first_line, _$[$0-3].first_column, [$$[$0-2], $$[$0]]);
break;
case 132:
this.$ = new NodoAST.NodoAST( id++, "Case", _$[$0-2].first_line, _$[$0-2].first_column, [$$[$0-1]]);
break;
case 133:
this.$ = new NodoAST.NodoAST( id++, "Default", _$[$0-2].first_line, _$[$0-2].first_column, [$$[$0]]);
break;
case 134:
this.$ = new NodoAST.NodoAST( id++, "Default", _$[$0-1].first_line, _$[$0-1].first_column, []);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:8,10:4,11:5,12:6,13:7,14:$V1,16:$V2,17:$V3,18:$V4},{1:[3]},{5:[1,14]},{2:$V0,5:[2,2],7:8,10:15,11:5,12:6,13:7,14:$V1,16:$V2,17:$V3,18:$V4},o($V5,[2,6]),o($V5,[2,7]),o($V5,[2,8]),o($V5,[2,9]),o($V5,[2,10]),{15:[1,16]},{15:[1,17]},o($V6,[2,12]),o($V6,[2,13]),{8:[1,18],9:[1,19]},{1:[2,1]},o($V5,[2,5]),{19:[1,20]},{9:[1,21]},o($V6,[2,3]),o($V6,[2,4]),{2:$V0,7:32,8:[1,23],13:26,15:$V7,16:$V2,17:$V3,20:22,21:24,22:25,23:27,24:28,25:29,26:30,27:31,28:$V8,33:34,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd},o($V5,[2,11]),{8:[1,41]},o($V5,[2,15]),{2:$V0,7:32,8:[2,16],13:26,15:$V7,16:$V2,17:$V3,22:42,23:27,24:28,25:29,26:30,27:31,28:$V8,33:34,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd},o($Ve,[2,18]),o($Ve,[2,19]),o($Ve,[2,20]),o($Ve,[2,21]),o($Ve,[2,22]),o($Ve,[2,23]),o($Ve,[2,24]),o($Ve,[2,25]),{15:[1,43],34:[1,44]},{15:[1,45],56:46},{57:$Vf},{15:[2,40]},{15:[2,41]},{15:[2,42]},{15:[2,43]},{15:[2,44]},o($V5,[2,14]),o($Ve,[2,17]),{29:[1,48]},{29:[1,49]},o($Vg,$Vh,{29:[1,50]}),{9:[1,52],36:[1,53],57:[1,51]},{15:$Vi,29:$Vj,58:54,59:55,60:56,67:58,68:$Vk,69:$Vl,70:$Vm,71:$Vn},{30:64,31:[1,65],33:68,35:66,37:67,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd},{31:[1,69]},{30:70,31:[1,71],33:68,35:66,37:67,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd},{15:$Vi,29:$Vj,58:72,59:55,60:56,67:58,68:$Vk,69:$Vl,70:$Vm,71:$Vn},o($Vo,[2,63]),{15:[1,73]},{9:[1,74]},{9:[2,66],15:$Vi,29:$Vj,60:75,67:58,68:$Vk,69:$Vl,70:$Vm,71:$Vn},o($Vp,[2,68],{61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv}),{15:$Vi,29:$Vj,60:82,67:58,68:$Vk,69:$Vl,70:$Vm,71:$Vn},o($Vw,[2,76]),o($Vx,[2,77]),o($Vx,[2,78]),o($Vx,[2,79]),o($Vx,[2,80]),o($Vx,[2,81]),{31:[1,83]},{19:[1,84]},{31:[2,36],36:[1,85]},o($Vy,[2,38]),{15:[1,86]},{19:[1,87]},{31:[1,88]},{19:[1,89]},{9:[1,90]},o($Vg,[2,64]),o($Vo,[2,84]),o($Vp,[2,67],{61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv}),{15:$Vi,29:$Vj,60:91,67:58,68:$Vk,69:$Vl,70:$Vm,71:$Vn},{15:$Vi,29:$Vj,60:92,67:58,68:$Vk,69:$Vl,70:$Vm,71:$Vn},{15:$Vi,29:$Vj,60:93,67:58,68:$Vk,69:$Vl,70:$Vm,71:$Vn},{15:$Vi,29:$Vj,60:94,67:58,68:$Vk,69:$Vl,70:$Vm,71:$Vn},{15:$Vi,29:$Vj,60:95,67:58,68:$Vk,69:$Vl,70:$Vm,71:$Vn},{15:$Vi,29:$Vj,60:96,67:58,68:$Vk,69:$Vl,70:$Vm,71:$Vn},{31:[1,97],61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv},{19:[1,98]},{2:$V0,7:113,8:[1,100],13:103,15:$Vz,16:$V2,17:$V3,26:105,27:104,32:99,33:115,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:101,44:102,45:106,46:107,47:108,48:109,49:110,50:111,51:112,52:$VA,53:$VB,54:$VC,72:$VD,88:$VE,89:$VF,90:120,92:$VG,95:$VH},{33:68,37:125,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd},o($Vy,[2,39]),{2:$V0,7:113,8:[1,127],13:103,15:$Vz,16:$V2,17:$V3,26:105,27:104,32:126,33:115,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:101,44:102,45:106,46:107,47:108,48:109,49:110,50:111,51:112,52:$VA,53:$VB,54:$VC,72:$VD,88:$VE,89:$VF,90:120,92:$VG,95:$VH},{19:[1,128]},{2:$V0,7:113,8:[1,130],13:103,15:$Vz,16:$V2,17:$V3,26:105,27:104,32:129,33:115,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:101,44:102,45:106,46:107,47:108,48:109,49:110,50:111,51:112,52:$VA,53:$VB,54:$VC,72:$VD,88:$VE,89:$VF,90:120,92:$VG,95:$VH},o($Vo,[2,62]),o($VI,[2,69],{63:$Vs,64:$Vt,65:$Vu,66:$Vv}),o($VI,[2,70],{63:$Vs,64:$Vt,65:$Vu,66:$Vv}),o($VJ,[2,71],{65:$Vu,66:$Vv}),o($VJ,[2,72],{65:$Vu,66:$Vv}),o($Vw,[2,73]),o($Vw,[2,74]),o($Vw,[2,75]),{2:$V0,7:113,8:[1,132],13:103,15:$Vz,16:$V2,17:$V3,26:105,27:104,32:131,33:115,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:101,44:102,45:106,46:107,47:108,48:109,49:110,50:111,51:112,52:$VA,53:$VB,54:$VC,72:$VD,88:$VE,89:$VF,90:120,92:$VG,95:$VH},{8:[1,133]},o($Ve,[2,29]),o($VK,[2,45],{13:103,27:104,26:105,45:106,46:107,47:108,48:109,49:110,50:111,51:112,7:113,33:115,90:120,44:134,2:$V0,15:$Vz,16:$V2,17:$V3,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,52:$VA,53:$VB,54:$VC,72:$VD,88:$VE,89:$VF,92:$VG,95:$VH}),o($VL,[2,47]),o($VL,[2,48]),o($VL,[2,49]),o($VL,[2,50]),o($VL,[2,51]),o($VL,[2,52]),o($VL,[2,53]),o($VL,[2,54]),o($VL,[2,55]),o($VL,[2,56]),o($VL,[2,57]),o($VL,[2,58]),{29:[1,135],57:$Vf},{15:[1,136],56:46},{29:[1,137]},{29:[1,138]},{19:[1,139]},{29:[1,140]},o($VL,[2,117],{91:141,93:142,94:$VM}),{9:[1,144]},{9:[1,145]},{15:$Vi,29:$Vj,55:146,59:147,60:56,67:58,68:$Vk,69:$Vl,70:$Vm,71:$Vn},{29:[1,148]},o($Vy,[2,37]),{8:[1,149]},o($Ve,[2,35]),{2:$V0,7:113,8:[1,151],13:103,15:$Vz,16:$V2,17:$V3,26:105,27:104,32:150,33:115,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:101,44:102,45:106,46:107,47:108,48:109,49:110,50:111,51:112,52:$VA,53:$VB,54:$VC,72:$VD,88:$VE,89:$VF,90:120,92:$VG,95:$VH},{8:[1,152]},o($Ve,[2,33]),{8:[1,153]},o($Ve,[2,27]),o($Ve,[2,28]),o($VL,[2,46]),{15:$Vi,29:$Vj,31:[1,155],55:154,59:147,60:56,67:58,68:$Vk,69:$Vl,70:$Vm,71:$Vn},o($Vg,$Vh),{15:$V7,26:158,27:157,33:115,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,73:156},{15:$Vi,29:$VN,67:164,68:$Vk,69:$Vl,70:$Vm,71:$Vn,74:159,76:160,77:161,86:$VO},{2:$V0,7:113,8:[1,166],13:103,15:$Vz,16:$V2,17:$V3,26:105,27:104,32:165,33:115,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:101,44:102,45:106,46:107,47:108,48:109,49:110,50:111,51:112,52:$VA,53:$VB,54:$VC,72:$VD,88:$VE,89:$VF,90:120,92:$VG,95:$VH},{15:$Vi,29:$Vj,55:167,59:147,60:56,67:58,68:$Vk,69:$Vl,70:$Vm,71:$Vn},o($VL,[2,116],{93:168,94:$VM}),o($VP,[2,121]),{19:[1,170],90:169,92:$VG},o($VL,[2,59]),o($VL,[2,60]),{9:[1,171]},o($VQ,[2,127],{67:58,60:75,15:$Vi,29:$Vj,68:$Vk,69:$Vl,70:$Vm,71:$Vn}),{15:$Vi,29:$VN,67:164,68:$Vk,69:$Vl,70:$Vm,71:$Vn,74:172,76:160,77:161,86:$VO},o($Ve,[2,34]),{8:[1,173]},o($Ve,[2,31]),o($Ve,[2,32]),o($Ve,[2,26]),{31:[1,174]},o($VL,[2,83]),{15:$Vi,29:$VN,67:164,68:$Vk,69:$Vl,70:$Vm,71:$Vn,74:175,76:160,77:161,86:$VO},o($VR,[2,87]),o($VR,[2,88]),{31:[1,176]},o($VQ,[2,89],{67:164,77:177,15:$Vi,29:$VN,68:$Vk,69:$Vl,70:$Vm,71:$Vn,86:$VO}),o($VS,[2,91],{61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41}),{15:$Vi,29:$VN,67:164,68:$Vk,69:$Vl,70:$Vm,71:$Vn,77:192,86:$VO},{15:$Vi,29:$VN,67:164,68:$Vk,69:$Vl,70:$Vm,71:$Vn,77:193,86:$VO},o($V51,[2,108]),{8:[1,194]},{88:[1,195]},{31:[1,196]},o($VP,[2,120]),o($VP,[2,122]),{2:$V0,7:113,8:[1,198],13:103,15:$Vz,16:$V2,17:$V3,26:105,27:104,32:197,33:115,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:101,44:102,45:106,46:107,47:108,48:109,49:110,50:111,51:112,52:$VA,53:$VB,54:$VC,72:$VD,88:$VE,89:$VF,90:120,92:$VG,95:$VH},o($VL,[2,61]),{31:[1,199]},o($Ve,[2,30]),o($VL,[2,82]),{9:[1,200]},{19:[1,201]},o($VS,[2,90],{61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41}),{15:$Vi,29:$VN,67:164,68:$Vk,69:$Vl,70:$Vm,71:$Vn,77:202,86:$VO},{15:$Vi,29:$VN,67:164,68:$Vk,69:$Vl,70:$Vm,71:$Vn,77:203,86:$VO},{15:$Vi,29:$VN,67:164,68:$Vk,69:$Vl,70:$Vm,71:$Vn,77:204,86:$VO},{15:$Vi,29:$VN,67:164,68:$Vk,69:$Vl,70:$Vm,71:$Vn,77:205,86:$VO},{15:$Vi,29:$VN,67:164,68:$Vk,69:$Vl,70:$Vm,71:$Vn,77:206,86:$VO},{15:$Vi,29:$VN,67:164,68:$Vk,69:$Vl,70:$Vm,71:$Vn,77:207,86:$VO},{15:$Vi,29:$VN,67:164,68:$Vk,69:$Vl,70:$Vm,71:$Vn,77:208,86:$VO},{15:$Vi,29:$VN,67:164,68:$Vk,69:$Vl,70:$Vm,71:$Vn,77:209,86:$VO},{15:$Vi,29:$VN,67:164,68:$Vk,69:$Vl,70:$Vm,71:$Vn,77:210,86:$VO},{15:$Vi,29:$VN,67:164,68:$Vk,69:$Vl,70:$Vm,71:$Vn,77:211,86:$VO},{15:$Vi,29:$VN,67:164,68:$Vk,69:$Vl,70:$Vm,71:$Vn,77:212,86:$VO},{15:$Vi,29:$VN,67:164,68:$Vk,69:$Vl,70:$Vm,71:$Vn,77:213,86:$VO},{15:$Vi,29:$VN,67:164,68:$Vk,69:$Vl,70:$Vm,71:$Vn,77:214,86:$VO},{15:$Vi,29:$VN,67:164,68:$Vk,69:$Vl,70:$Vm,71:$Vn,77:215,86:$VO},{31:[1,216],61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,78:$VZ,79:$V_,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41},o($V51,[2,107]),{88:[1,217]},{29:[1,218]},{19:[1,219]},{8:[1,220]},o($VP,[2,124]),{19:[1,221]},{15:[1,224],75:222,87:223},{2:$V0,7:113,8:[1,226],13:103,15:$Vz,16:$V2,17:$V3,26:105,27:104,32:225,33:115,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:101,44:102,45:106,46:107,47:108,48:109,49:110,50:111,51:112,52:$VA,53:$VB,54:$VC,72:$VD,88:$VE,89:$VF,90:120,92:$VG,95:$VH},o([9,15,29,31,68,69,70,71,78,79,86],[2,92],{61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41}),o([9,15,29,31,68,69,70,71,79,86],[2,93],{61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,78:$VZ,80:$V$,81:$V01,82:$V11,83:$V21,84:$V31,85:$V41}),o($V61,[2,95],{61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY}),o($V61,[2,96],{61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY}),o($V61,[2,97],{61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY}),o($V61,[2,98],{61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY}),o($V71,[2,99],{61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,80:$V$,81:$V01,82:$V11,83:$V21}),o($V71,[2,100],{61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,80:$V$,81:$V01,82:$V11,83:$V21}),o($V81,[2,101],{63:$VV,64:$VW,65:$VX,66:$VY}),o($V81,[2,102],{63:$VV,64:$VW,65:$VX,66:$VY}),o($V91,[2,103],{65:$VX,66:$VY}),o($V91,[2,104],{65:$VX,66:$VY}),o($V51,[2,105]),o($V51,[2,106]),o($V51,[2,94]),{29:[1,227]},{15:$Vi,29:$VN,67:164,68:$Vk,69:$Vl,70:$Vm,71:$Vn,74:228,76:160,77:161,86:$VO},{8:[1,230],96:229,97:231,98:232,99:$Va1,101:$Vb1},o($VP,[2,123]),{2:$V0,7:113,8:[1,236],13:103,15:$Vz,16:$V2,17:$V3,26:105,27:104,32:235,33:115,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:101,44:102,45:106,46:107,47:108,48:109,49:110,50:111,51:112,52:$VA,53:$VB,54:$VC,72:$VD,88:$VE,89:$VF,90:120,92:$VG,95:$VH},{31:[1,237]},{31:[2,109]},{61:[1,238],62:[1,239]},{8:[1,240]},o($VL,[2,113]),{15:$Vi,29:$VN,67:164,68:$Vk,69:$Vl,70:$Vm,71:$Vn,74:241,76:160,77:161,86:$VO},{31:[1,242]},{8:[1,243]},o($VL,[2,126]),{8:[2,128],98:244,99:$Va1,101:$Vb1},o($VK,[2,130]),{15:$Vi,67:245,68:$Vk,69:$Vl,70:$Vm,71:$Vn},{100:[1,246]},{8:[1,247]},o($VP,[2,119]),{19:[1,248]},{61:[1,249]},{62:[1,250]},o($VL,[2,112]),{31:[1,251]},{9:[1,252]},o($VL,[2,125]),o($VK,[2,129]),{100:[1,253]},o($VK,[2,134],{43:101,44:102,13:103,27:104,26:105,45:106,46:107,47:108,48:109,49:110,50:111,51:112,7:113,33:115,90:120,32:254,2:$V0,15:$Vz,16:$V2,17:$V3,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,52:$VA,53:$VB,54:$VC,72:$VD,88:$VE,89:$VF,92:$VG,95:$VH}),o($VP,[2,118]),{2:$V0,7:113,8:[1,256],13:103,15:$Vz,16:$V2,17:$V3,26:105,27:104,32:255,33:115,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:101,44:102,45:106,46:107,47:108,48:109,49:110,50:111,51:112,52:$VA,53:$VB,54:$VC,72:$VD,88:$VE,89:$VF,90:120,92:$VG,95:$VH},{31:[2,110]},{31:[2,111]},{9:[1,257]},o($VL,[2,115]),o($VK,[2,132],{43:101,44:102,13:103,27:104,26:105,45:106,46:107,47:108,48:109,49:110,50:111,51:112,7:113,33:115,90:120,32:258,2:$V0,15:$Vz,16:$V2,17:$V3,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,52:$VA,53:$VB,54:$VC,72:$VD,88:$VE,89:$VF,92:$VG,95:$VH}),o($VK,[2,133]),{8:[1,259]},o($VL,[2,86]),o($VL,[2,114]),o($VK,[2,131]),o($VL,[2,85])],
defaultActions: {14:[2,1],36:[2,40],37:[2,41],38:[2,42],39:[2,43],40:[2,44],223:[2,109],249:[2,110],250:[2,111]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var AST = require("./JS/TS/AST");
    var NodoAST = require("./JS/TS/NodoAST");
    var Error = require("./JS/TS/Error");
    var errores = [];
    var id = 0;
    var er = 0;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 17;
break;
case 1:return 16;
break;
case 2:return 38;
break;
case 3:return 39;
break;
case 4:return 40;
break;
case 5:return 42;
break;
case 6:return 41;
break;
case 7:return 61;
break;
case 8:return 62;
break;
case 9:return 63;
break;
case 10:return 64;
break;
case 11:return 65;
break;
case 12:return 66;
break;
case 13:return '++';
break;
case 14:return '--';
break;
case 15:return 85;
break;
case 16:return 84;
break;
case 17:return 82;
break;
case 18:return 83;
break;
case 19:return 80;
break;
case 20:return 81;
break;
case 21:return 78;
break;
case 22:return 79;
break;
case 23:return 86;
break;
case 24:return 29;
break;
case 25:return 31;
break;
case 26:return 19;
break;
case 27:return 8;
break;
case 28:return 9;
break;
case 29:return 100;
break;
case 30:return 36;
break;
case 31:return 57;
break;
case 32:return 18;
break;
case 33:return 14;
break;
case 34:return 92;
break;
case 35:return 94;
break;
case 36:return 95;
break;
case 37:return 99;
break;
case 38:return 101;
break;
case 39:return 52;
break;
case 40:return 88;
break;
case 41:return 89;
break;
case 42:return 72;
break;
case 43:return 53;
break;
case 44:return 54;
break;
case 45:return 28;
break;
case 46:return 34;
break;
case 47:return 'TK_SYSTEM';
break;
case 48:return 'TK_OUT';
break;
case 49:return 'TK_PRINT';
break;
case 50:return 'TK_PRINTLN';
break;
case 51:return 68;
break;
case 52:return 15;
break;
case 53:return 70;
break;
case 54:return 69;
break;
case 55:return 71;
break;
case 56:
break;
case 57:errores.push(new Error.Error(er++, yy_.yytext, "Lexico", yy_.yytext + " no pertenece al lenguaje", yy_.yylloc.first_line, yy_.yylloc.first_column));
break;
case 58:return 5;
break;
}
},
rules: [/^(?:\/\/[^\n]*)/,/^(?:\/\*[^"*/"]*\*\/)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:\+\+)/,/^(?:--)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:>=)/,/^(?:<)/,/^(?:<=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:=)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:"((\\")?|[^\"])*")/,/^(?:[A-Za-z"_"][A-Za-z"_"0-9]*)/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:'((\\")|[^"'"])')/,/^(?:true|false\b)/,/^(?:[ \r\t\n]+)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}